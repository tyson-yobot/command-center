 Since you're looking to fully rewrite the quote generation logic from Replit and remove any Flask require() errors, here‚Äôs a direct, simplified TypeScript-style implementation that mirrors what your handler was doing ‚Äî but without using Python or require() at all.

This version assumes:

You're triggering from a webhook or HTTP POST (e.g., /quote)

You have access to the parsed Tally form payload

Your quote_template.html is stored locally or accessible as a string

You're uploading the generated PDF to Google Drive, then optionally emailing/slacking

‚úÖ server/routes/quote.ts (full replacement)
ts
Copy
Edit
import express from 'express';
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { google } from 'googleapis';
import nodemailer from 'nodemailer';
import { sendSlackAlert } from '../utils/slack';

const router = express.Router();

const GOOGLE_FOLDER_ID = '1-D1Do5bWsHWX1R7YexNEBLsgpBsV7WRh';

router.post('/quote', async (req, res) => {
  try {
    const data = req.body; // Parsed form submission from Tally

    // Step 1: Load and fill HTML template
    const template = fs.readFileSync(path.join(__dirname, '../templates/quote_template.html'), 'utf8');
    const filled = template
      .replace('{{Company Name}}', data['Company Name'])
      .replace('{{Contact}}', data['Full Name'])
      .replace('{{Email}}', data['Email Address'])
      .replace('{{Phone}}', data['Phone Number'])
      .replace('{{Website}}', data['Website'] || '')
      .replace('{{Total}}', `$${parseFloat(data['üí≥ Final Payment Amount Due']).toFixed(2)}`)
      .replace('{{Bot Package}}', data['ü§ñ Bot Package'] || '')
      .replace('{{Add Ons}}', data['üß© Add-On Modules'] || '')
      .replace('{{TaxRate}}', '6.3%');

    const htmlPath = `/tmp/quote_${Date.now()}.html`;
    const pdfPath = htmlPath.replace('.html', '.pdf');

    fs.writeFileSync(htmlPath, filled);

    // Step 2: Convert HTML to PDF
    execSync(`npx --yes html-pdf-node ${htmlPath} ${pdfPath}`);

    // Step 3: Upload PDF to Google Drive
    const auth = new google.auth.GoogleAuth({
      keyFile: 'google_creds.json',
      scopes: ['https://www.googleapis.com/auth/drive']
    });
    const drive = google.drive({ version: 'v3', auth: await auth.getClient() });

    const folderRes = await drive.files.list({
      q: `mimeType='application/vnd.google-apps.folder' and name='${data["Company Name"]}' and '${GOOGLE_FOLDER_ID}' in parents`,
      fields: 'files(id)'
    });

    let folderId = folderRes.data.files?.[0]?.id;
    if (!folderId) {
      const folder = await drive.files.create({
        requestBody: {
          name: data["Company Name"],
          mimeType: 'application/vnd.google-apps.folder',
          parents: [GOOGLE_FOLDER_ID]
        },
        fields: 'id'
      });
      folderId = folder.data.id!;
    }

    const fileRes = await drive.files.create({
      requestBody: {
        name: `Quote - ${data["Company Name"]}.pdf`,
        mimeType: 'application/pdf',
        parents: [folderId]
      },
      media: {
        mimeType: 'application/pdf',
        body: fs.createReadStream(pdfPath)
      },
      fields: 'webViewLink'
    });

    const quoteLink = fileRes.data.webViewLink;

    // Step 4: Email
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'noreply@yobot.bot',
        pass: 'your_app_password_here'
      }
    });

    await transporter.sendMail({
      from: '"YoBot" <noreply@yobot.bot>',
      to: ['tyson@yobot.bot', 'daniel@yobot.bot'],
      subject: `üìé Quote Ready ‚Äì ${data["Company Name"]}`,
      text: `Quote uploaded to Google Drive:\n${quoteLink}`,
      attachments: [{ filename: path.basename(pdfPath), path: pdfPath }]
    });

    // Step 5: Slack Alert
    sendSlackAlert({
      company: data['Company Name'],
      contact: data['Full Name'],
      amount: data['üí≥ Final Payment Amount Due'],
      url: quoteLink
    });

    res.json({ success: true, quoteUrl: quoteLink });

  } catch (err) {
    console.error('‚ùå Quote generation failed:', err);
    res.status(500).json({ error: 'Quote generation failed' });
  }
});

export default router;
üß© Notes:
You‚Äôll need to define sendSlackAlert() in a utility file (/utils/slack.ts)

Replace 'your_app_password_here' with your real Gmail App Password

Add MIME replacements if you need better HTML ‚Üí PDF formatting

Fully customizable ‚Äî this is your end-to-end route from Tally ‚Üí PDF ‚Üí Drive ‚Üí Email/Slack

