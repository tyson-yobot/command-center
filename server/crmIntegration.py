import os
import json
import requests
import datetime

def create_hubspot_contact(email, first_name, last_name, company_name, api_key):
    """Add Client to HubSpot CRM"""
    url = "https://api.hubapi.com/crm/v3/objects/contacts"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "properties": {
            "email": email,
            "firstname": first_name,
            "lastname": last_name,
            "company": company_name
        }
    }

    response = requests.post(url, headers=headers, json=data)
    if not response.ok:
        print(f"HubSpot Error: {response.text}")
        return None
    return response.json()

def create_qbo_invoice(qbo_access_token, company_id, customer_id, amount, due_date, description):
    """Create Invoice in QuickBooks Online"""
    url = f"https://sandbox-quickbooks.api.intuit.com/v3/company/{company_id}/invoice?minorversion=65"
    headers = {
        "Authorization": f"Bearer {qbo_access_token}",
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    payload = {
        "CustomerRef": {
            "value": customer_id
        },
        "Line": [{
            "Amount": amount,
            "DetailType": "SalesItemLineDetail",
            "SalesItemLineDetail": {
                "ItemRef": {
                    "value": "1",
                    "name": description
                }
            }
        }],
        "DueDate": due_date,
        "PrivateNote": "Auto-generated by YoBotÂ® Sales Order Flow"
    }

    response = requests.post(url, headers=headers, json=payload)
    if not response.ok:
        print(f"QuickBooks Error: {response.text}")
        return None
    return response.json()

def get_google_access_token():
    """Get Google access token using refresh token with proper error handling"""
    refresh_token = os.getenv("GOOGLE_REFRESH_TOKEN")
    client_id = os.getenv("GOOGLE_CLIENT_ID")
    client_secret = os.getenv("GOOGLE_CLIENT_SECRET")
    
    if not all([refresh_token, client_id, client_secret]):
        raise Exception("Missing Google credentials")
    
    # Clean up client_secret if it contains extra text
    if "Google Calendar Sync" in client_secret:
        # Extract actual secret from the string
        parts = client_secret.split()
        client_secret = parts[-1] if len(parts) > 1 else client_secret
    
    token_url = "https://oauth2.googleapis.com/token"
    data = {
        "client_id": client_id.strip(),
        "client_secret": client_secret.strip(),
        "refresh_token": refresh_token.strip(),
        "grant_type": "refresh_token"
    }
    
    response = requests.post(token_url, data=data)
    if response.status_code != 200:
        raise Exception(f"Token refresh failed: {response.text}")
    
    return response.json()["access_token"]

def create_google_drive_folder(folder_name, parent_folder_id=None):
    """Create folder in Google Drive with proper authentication"""
    access_token = get_google_access_token()
    
    url = "https://www.googleapis.com/drive/v3/files"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    folder_metadata = {
        "name": folder_name,
        "mimeType": "application/vnd.google-apps.folder"
    }
    
    if parent_folder_id:
        folder_metadata["parents"] = [parent_folder_id]
    
    response = requests.post(url, headers=headers, json=folder_metadata)
    
    if response.status_code != 200:
        raise Exception(f"Folder creation failed: {response.text}")
    
    return response.json()["id"]

def process_complete_crm_sales_order(order_data):
    """Complete CRM integration for sales order processing"""
    try:
        # Extract order data
        company_name = order_data.get('customer_name', '')
        email = order_data.get('email', '')
        package = order_data.get('package', '')
        total = order_data.get('total', '').replace('$', '').replace(',', '')
        
        # Parse name from email or use company name
        name_parts = email.split('@')[0].split('.')
        first_name = name_parts[0].title() if len(name_parts) > 0 else 'Contact'
        last_name = name_parts[1].title() if len(name_parts) > 1 else company_name.split()[0]
        
        print(f"Processing CRM integration for {company_name}")
        
        # Generate proper quote number
        today = datetime.datetime.now().strftime("%Y%m%d")
        timestamp = datetime.datetime.now().strftime("%H%M")
        quote_number = f"Q-{today}-{timestamp}"
        
        result = {
            "success": True,
            "client_name": company_name,
            "quote_number": quote_number,
            "email": email,
            "package": package,
            "total": total,
            "processing_time": datetime.datetime.now().isoformat(),
            "method": "CRM Integration"
        }
        
        # HubSpot Integration
        hubspot_api_key = os.getenv("HUBSPOT_API_KEY")
        if hubspot_api_key:
            try:
                hubspot_contact = create_hubspot_contact(
                    email, first_name, last_name, company_name, hubspot_api_key
                )
                if hubspot_contact:
                    result["hubspot_contact_id"] = hubspot_contact.get("id")
                    result["hubspot_success"] = True
                else:
                    result["hubspot_success"] = False
                    result["hubspot_error"] = "Contact creation failed"
            except Exception as e:
                result["hubspot_success"] = False
                result["hubspot_error"] = str(e)
        else:
            result["hubspot_success"] = False
            result["hubspot_error"] = "API key not configured"
        
        # QuickBooks Integration
        qbo_access_token = os.getenv("QUICKBOOKS_ACCESS_TOKEN")
        qbo_company_id = os.getenv("QUICKBOOKS_REALM_ID")
        
        if qbo_access_token and qbo_company_id:
            try:
                # Calculate due date (30 days from now)
                due_date = (datetime.datetime.now() + datetime.timedelta(days=30)).strftime("%Y-%m-%d")
                
                qbo_invoice = create_qbo_invoice(
                    qbo_access_token, qbo_company_id, "1",  # Default customer ID
                    float(total) if total.replace('.', '').isdigit() else 1000.0,
                    due_date, f"{package} - {quote_number}"
                )
                
                if qbo_invoice:
                    result["qbo_invoice_id"] = qbo_invoice.get("QueryResponse", {}).get("Invoice", [{}])[0].get("Id")
                    result["qbo_success"] = True
                else:
                    result["qbo_success"] = False
                    result["qbo_error"] = "Invoice creation failed"
            except Exception as e:
                result["qbo_success"] = False
                result["qbo_error"] = str(e)
        else:
            result["qbo_success"] = False
            result["qbo_error"] = "Credentials not configured"
        
        # Google Drive Integration with corrected authentication
        try:
            # Create main client folder
            folder_name = f"{company_name} - {quote_number}"
            main_folder_id = create_google_drive_folder(folder_name)
            
            # Create subfolders
            quotes_folder_id = create_google_drive_folder("Quotes", main_folder_id)
            contracts_folder_id = create_google_drive_folder("Contracts", main_folder_id)
            communications_folder_id = create_google_drive_folder("Communications", main_folder_id)
            
            result["google_drive_success"] = True
            result["folder_id"] = main_folder_id
            result["folder_url"] = f"https://drive.google.com/drive/folders/{main_folder_id}"
            result["quotes_folder_id"] = quotes_folder_id
            result["contracts_folder_id"] = contracts_folder_id
            result["communications_folder_id"] = communications_folder_id
            
        except Exception as e:
            result["google_drive_success"] = False
            result["google_drive_error"] = str(e)
        
        return result
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "client_name": order_data.get('customer_name', 'Unknown'),
            "processing_time": datetime.datetime.now().isoformat(),
            "method": "CRM Integration"
        }

if __name__ == "__main__":
    # Test with real data structure
    test_order = {
        "customer_name": "Advanced Healthcare Solutions",
        "email": "john.smith@advancedhealthcare.com",
        "package": "YoBot Enterprise Package",
        "total": "$125,000"
    }
    
    result = process_complete_crm_sales_order(test_order)
    print(json.dumps(result, indent=2))