BATCH 6: Airtable Functions to Wire In (26–30)
python
Copy
Edit
# ✅ 26. Get most recent test by name
def get_latest_test_result(api_key, test_name):
    records = find_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key, "🧪 Test Name", test_name)
    if not records.get("records"):
        return None
    sorted_records = sorted(
        records["records"],
        key=lambda r: r["fields"].get("📅 Date Tested", ""),
        reverse=True
    )
    return sorted_records[0] if sorted_records else None

# ✅ 27. Filter tests by tester name
def get_tests_by_tester(api_key, tester_name):
    url = "https://api.airtable.com/v0/appCoAtCZdARb4AM2/tblRNjNnaGL5ICIf9"
    headers = {"Authorization": f"Bearer {api_key}"}
    params = {"filterByFormula": f"{{🧑‍💻 Tested By}} = '{tester_name}'"}
    response = requests.get(url, headers=headers, params=params)
    return response.json()

# ✅ 28. Archive test results by setting a custom field (if present)
def archive_test_result(api_key, test_name):
    existing = find_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key, "🧪 Test Name", test_name)
    if not existing.get("records"):
        return {"error": "Test not found"}
    record_id = existing["records"][0]["id"]
    return update_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", record_id, api_key, {
        "🗂️ Archived?": "Yes"  # Make sure this field exists in Airtable
    })

# ✅ 29. Pull all test results with a specific tag (e.g., “Command Center”)
def get_tests_by_tag(api_key, tag_keyword):
    url = "https://api.airtable.com/v0/appCoAtCZdARb4AM2/tblRNjNnaGL5ICIf9"
    headers = {"Authorization": f"Bearer {api_key}"}
    params = {
        "filterByFormula": f"FIND('{tag_keyword}', {{🧠 Notes}})"
    }
    response = requests.get(url, headers=headers, params=params)
    return response.json()

# ✅ 30. Push full integration results to Slack (placeholder, needs webhook)
def post_results_to_slack(test_summary, slack_webhook_url):
    import requests
    payload = {
        "text": f"""🧪 *Test Summary Report*
Total: {test_summary['total']}
✅ Passed: {test_summary['passed']}
❌ Failed: {test_summary['failed']}
📊 Pass Rate: {test_summary['pass_rate']}%
"""
    }
    response = requests.post(slack_webhook_url, json=payload)
    return response.status_code == 200