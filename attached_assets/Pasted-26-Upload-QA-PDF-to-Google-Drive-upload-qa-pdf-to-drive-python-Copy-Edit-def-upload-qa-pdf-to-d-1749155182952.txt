26. Upload QA PDF to Google Drive – upload_qa_pdf_to_drive()
python
Copy
Edit
def upload_qa_pdf_to_drive(filename):
    headers = {
        "Authorization": f"Bearer {GDRIVE_API_KEY}"
    }
    metadata = {
        "name": filename,
        "parents": [GDRIVE_QA_FOLDER_ID],
        "mimeType": "application/pdf"
    }
    files = {
        'data': ('metadata', json.dumps(metadata), 'application/json'),
        'file': open(filename, 'rb')
    }
    response = requests.post(
        "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
        headers=headers,
        files=files
    )
    if response.status_code == 200:
        file_id = response.json()["id"]
        return f"https://drive.google.com/file/d/{file_id}/view"
    return ""
🔗 27. Push to Slack + Link to HubSpot (If Matched) – send_qa_alert()
python
Copy
Edit
def send_qa_alert(data):
    message = f"""📞 *QA Review Complete*
• **Agent:** {data['agent_name']}
• **Score:** {data['qa_score']}/10
• [📄 View QA PDF]({data['pdf_link']})

🧠 Tags: {", ".join(data['tags'])}
📝 Comments: {data['qa_comments']}
🕓 Reviewed At: {data['timestamp']}"""

    requests.post(SLACK_WEBHOOK_URL, json={"text": message})
🧩 28. PDF File Cleanup (Post-Upload) – cleanup_pdf()
python
Copy
Edit
def cleanup_pdf(filename):
    try:
        os.remove(filename)
    except Exception as e:
        print(f"Error deleting PDF: {e}")
🧠 29. NLP Tracker Sync (Optional) – update_nlp_keyword_tracker()
python
Copy
Edit
def update_nlp_keyword_tracker(tags):
    for tag in tags:
        payload = {
            "fields": {
                "🧠 Keyword": tag,
                "📈 Usage Count": 1
            }
        }
        requests.post(
            f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/🧠 NLP Keyword Tracker",
            json=payload,
            headers={"Authorization": f"Bearer {AIRTABLE_API_KEY}", "Content-Type": "application/json"}
        )
✅ 30. Auto-Flag Escalations – check_for_escalation_flags()
python
Copy
Edit
def check_for_escalation_flags(transcript):
    escalation_phrases = ["let me speak to a manager", "file a complaint", "this is unacceptable"]
    return any(phrase in transcript.lower() for phrase in escalation_phrases)