support_dispatcher.py
python
Copy
Edit
import os
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from pyairtable import Table
from datetime import datetime

# === CONFIGURATION ===
SLACK_TOKEN = "xRYo7LD89mNz2EvZy3kOrFiv"
SLACK_CHANNEL = "#support-queue"

AIRTABLE_API_KEY = "patQdihpuEhLfx2vP"
BASE_ID = "appCoAtCZdARb4AM2"

TICKET_LOG_TABLE = "tblQPr9cHyNZDpipS"
ERROR_LOG_TABLE = "tblo1ESkt9ybkvaJH"

VOICE_FILE_PATH = "./uploads/test_yobot_voice.mp3"

# === INITIALIZE CLIENTS ===
slack_client = WebClient(token=SLACK_TOKEN)
ticket_log = Table(AIRTABLE_API_KEY, BASE_ID, TICKET_LOG_TABLE)
error_log = Table(AIRTABLE_API_KEY, BASE_ID, ERROR_LOG_TABLE)

# === ERROR LOGGING FUNCTION ===
def log_error(module, error_type, message, ticket_id=None, file_name=None):
    try:
        error_log.create({
            "🧩 Source Module": module,
            "🚨 Error Type": error_type,
            "📝 Error Message": message,
            "📁 Fallback File Name": file_name or VOICE_FILE_PATH,
            "🔁 Retry Attempted": True,
            "📊 Retry Result": "Failed",
            "🧠 Context Ticket ID": ticket_id or "N/A",
            "📆 Date": datetime.now().strftime("%Y-%m-%d"),
            "⏰ Time": datetime.now().strftime("%H:%M:%S")
        })
    except Exception as e:
        print(f"[FATAL] Failed to log error to Airtable: {e}")

# === MAIN FUNCTION ===
def dispatch_support_response(ticket):
    try:
        ticket_id = ticket["ticketId"]
        client_name = ticket["clientName"]
        topic = ticket["topic"]
        ai_reply = ticket["aiReply"]
        escalation_flag = ticket["escalationFlag"]
        sentiment = ticket["sentiment"]

        # 1. Post Slack text
        slack_client.chat_postMessage(
            channel=SLACK_CHANNEL,
            text=f"*🎟 AI Reply for Ticket `{ticket_id}`*\n*Client:* {client_name}\n*Topic:* {topic}\n> {ai_reply}"
        )

        # 2. Upload MP3
        upload = slack_client.files_upload(
            channels=SLACK_CHANNEL,
            file=VOICE_FILE_PATH,
            filename=f"{ticket_id}_reply.mp3",
            title="🎧 Voice Reply",
            initial_comment="Here’s the MP3 reply from YoBot 🎙"
        )
        mp3_url = upload["file"]["permalink"]

        # 3. Log ticket to Airtable
        ticket_log.create({
            "🆔 Ticket ID": ticket_id,
            "🧑 Client Name": client_name,
            "📌 Topic": topic,
            "🤖 AI Reply": ai_reply,
            "🚩 Escalation Flag": escalation_flag,
            "📉 Sentiment": sentiment,
            "🎧 Voice File": mp3_url
        })

        print(f"[{datetime.now()}] ✅ Ticket dispatched: {ticket_id}")

    except SlackApiError as e:
        log_error("Slack Upload", "SlackApiError", e.response['error'], ticket.get("ticketId"))
        print(f"[Slack Error] {e.response['error']}")
    except Exception as e:
        log_error("Dispatch Handler", "GeneralError", str(e), ticket.get("ticketId"))
        print(f"[Unhandled Error] {e}")
✅ How to Use
Call this in your webhook_handler.py:

python
Copy
Edit
from support_dispatcher import dispatch_support_response

ticket = {
    "ticketId": "TCK-2031",
    "clientName": "Brian Knox",
    "topic": "Bot not saving notes",
    "aiReply": "We resolved the note-saving issue. Please test again.",
    "escalationFlag": False,
    "sentiment": "Neutral"
}

dispatch_support_response(ticket)