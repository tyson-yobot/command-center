// 161 - Round Budget to Nearest $10 for SmartSpend
function roundBudgetToNearest10(amount) {
  return Math.round(amount / 10) * 10;
}

// 162 - VoiceBot: Strip Fillers from Transcript
function cleanTranscript(rawText) {
  return rawText.replace(/\b(um+|uh+|like|you know|so)\b/gi, "").replace(/\s+/g, " ").trim();
}

// 163 - Internal Alert: Command Center Down
async function alertCommandCenterOffline() {
  await sendSlackNotification("üö® Command Center is currently offline!");
  await logManualOverride("system", "Command Center heartbeat failure");
}

// 164 - Get Last Contacted Date for Lead
function getLastContacted(lead) {
  return lead.history?.filter(h => h.type === "call" || h.type === "email")
    ?.map(h => new Date(h.date))
    ?.sort((a, b) => b - a)?.[0]?.toISOString() ?? null;
}

// 165 - Retry Automation with Delay
async function retryWithDelay(fn, retries = 3, delay = 2000) {
  for (let i = 0; i < retries; i++) {
    try { return await fn(); } 
    catch (e) { if (i === retries - 1) throw e; await new Promise(r => setTimeout(r, delay)); }
  }
}

// 166 - Validate VoiceBot Audio File Format
function isValidAudioFile(filename) {
  return /\.(mp3|wav|m4a)$/i.test(filename);
}

// 167 - Generate Public Share Link for Airtable Record
function createAirtableShareLink(baseId, tableId, recordId) {
  return `https://airtable.com/${baseId}/${tableId}/${recordId}`;
}

// 168 - Auto-tag Lead Based on Source Platform
function tagLeadSource(url) {
  if (url.includes("facebook.com")) return "Facebook";
  if (url.includes("linkedin.com")) return "LinkedIn";
  if (url.includes("google.com")) return "Google";
  return "Other";
}

// 169 - Remove Special Characters From Filename
function sanitizeFilename(filename) {
  return filename.replace(/[^\w\d_\-\.]/g, "_");
}

// 170 - Check Webhook Response Health
async function checkWebhookStatus(url) {
  try {
    const res = await fetch(url);
    return res.status === 200 ? "‚úÖ OK" : `‚ö†Ô∏è ${res.status}`;
  } catch (e) {
    return "‚ùå ERROR";
  }
}
