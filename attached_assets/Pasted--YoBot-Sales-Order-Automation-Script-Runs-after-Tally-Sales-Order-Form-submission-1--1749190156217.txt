# === YoBot¬Æ Sales Order Automation Script ===
# Runs after Tally Sales Order Form submission
# 1. Creates Drive Folder
# 2. Generates Quote PDF
# 3. Uploads PDF to Folder
# 4. Pushes to Airtable
# 5. Creates HubSpot contact
# 6. Compiles work order task list
# 7. Emails Tyson + Daniel
# 8. Slack notification
# 9. Sends DocuSign

# ‚ö†Ô∏è Replit team: Install required packages
# pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib pdfkit jinja2 requests

import datetime, os, requests, pdfkit
from jinja2 import Template
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

# === Setup Credentials ===
creds = Credentials(
    token=None,
    refresh_token="1//0g9GnAKVfRlM9CgYIARAAGBASNwF-L9IrBya2ZudqCC8oAaznpP3_Xd-JvwWc41WFlvT44G9UN3hiEtZWTyN2YfAmBtQdpTfdkA",
    token_uri="https://oauth2.googleapis.com/token",
    client_id="685952645658-k8glf5nnp4d2u1cafih1pbauudus3nc.apps.googleusercontent.com",
    client_secret="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",
    scopes=["https://www.googleapis.com/auth/drive"]
)
drive = build("drive", "v3", credentials=creds)

# === Replace with actual values ===
CLIENTS_FOLDER_ID = "YOUR_GOOGLE_DRIVE_FOLDER_ID"
AIRTABLE_API_KEY = "..."
AIRTABLE_BASE_ID = "..."
HUBSPOT_API_KEY = "..."
SLACK_WEBHOOK = "..."
SENDGRID_KEY = "..."
DOCUSIGN_TOKEN = "..."
DOCUSIGN_ACCOUNT_ID = "..."
DOCUSIGN_TEMPLATE_ID = "..."

# === Main Handler ===
def run_sales_order(form_data):
    company = form_data["company"]
    contact = form_data["contact"]
    email = form_data["email"]
    phone = form_data["phone"]
    package = form_data["package"]
    addons = form_data["addons"]
    stripe_paid = float(form_data["amount_paid"])
    quote_id = f"Q-{datetime.datetime.now().strftime('%Y%m%d')}-001"

    # 1. Create Google Drive folder
    folder = drive.files().create(body={
        "name": company,
        "parents": [CLIENTS_FOLDER_ID],
        "mimeType": "application/vnd.google-apps.folder"
    }, fields="id").execute()
    folder_id = folder['id']

    # 2. Generate PDF from HTML Template
    with open("quote_template.html") as f: html_template = Template(f.read())

    items = "".join([
        f"<tr><td>{package['name']}</td><td>{package['desc']}</td><td>1</td><td>${package['setup']}</td></tr>" +
        f"<tr><td>{package['name']} Monthly</td><td>Subscription</td><td>1</td><td>${package['monthly']}</td></tr>"
    ] + [
        f"<tr><td>{a['name']}</td><td>{a['desc']}</td><td>1</td><td>${a['setup']}</td></tr>" +
        f"<tr><td>{a['name']} Monthly</td><td>Add-on</td><td>1</td><td>${a['monthly']}</td></tr>"
        for a in addons
    ])

    subtotal = float(package['setup']) + sum(float(a['setup']) for a in addons)
    tax = round(subtotal * 0.063, 2)
    total = subtotal + tax
    balance = total - stripe_paid

    html = html_template.render(
        QuoteNumber=quote_id,
        QuoteDate=datetime.date.today().strftime("%B %d, %Y"),
        ClientName=company,
        ContactName=contact,
        ContactEmail=email,
        ContactPhone=phone,
        LineItems=items,
        TotalOneTime=f"${subtotal:.2f}",
        SalesTax=f"${tax:.2f}",
        TotalDue=f"${total:.2f}",
        PaidAmount=f"${stripe_paid:.2f}",
        BalanceDue=f"${balance:.2f}"
    )

    pdf_path = f"/tmp/{company}-{quote_id}.pdf"
    pdfkit.from_string(html, pdf_path)

    # 3. Upload PDF to Google Drive folder
    with open(pdf_path, "rb") as f:
        drive.files().create(
            body={"name": os.path.basename(pdf_path), "parents": [folder_id]},
            media_body=f,
            fields="id"
        ).execute()

    # 4. Push to Airtable
    requests.post(f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/SalesOrders", headers={
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }, json={"fields": {
        "üìõ Client Name": company,
        "üìÑ Quote Number": quote_id,
        "üìß Email": email,
        "ü§ñ Bot Package": package["name"],
        "üí∏ Paid": stripe_paid,
        "üßæ Total Due": total
    }})

    # 5. Create HubSpot contact
    requests.post("https://api.hubapi.com/contacts/v1/contact", params={"hapikey": HUBSPOT_API_KEY}, json={
        "properties": [
            {"property": "email", "value": email},
            {"property": "firstname", "value": contact},
            {"property": "company", "value": company},
            {"property": "phone", "value": phone}
        ]
    })

    # 6. Create task list (handled separately by Add-On Parser)
    # Call your function here, e.g., `create_task_list(package, addons, company)`

    # 7. Send email to internal team
    for to in ["tyson@yobot.bot", "daniel@yobot.bot"]:
        requests.post("https://api.sendgrid.com/v3/mail/send", headers={
            "Authorization": f"Bearer {SENDGRID_KEY}"
        }, json={
            "personalizations": [{"to": [{"email": to}]}],
            "from": {"email": "noreply@yobot.bot"},
            "subject": f"New Quote: {company} ({quote_id})",
            "content": [{"type": "text/plain", "value": f"PDF created and saved. Ready to proceed."}]
        })

    # 8. Slack ping
    requests.post(SLACK_WEBHOOK, json={"text": f"‚úÖ New Sales Order: *{company}* ({quote_id})"})

    # 9. Send DocuSign
    requests.post(f"https://demo.docusign.net/restapi/v2.1/accounts/{DOCUSIGN_ACCOUNT_ID}/envelopes", headers={
        "Authorization": f"Bearer {DOCUSIGN_TOKEN}",
        "Content-Type": "application/json"
    }, json={
        "templateId": DOCUSIGN_TEMPLATE_ID,
        "templateRoles": [{"email": email, "name": contact, "roleName": "Client"}],
        "status": "sent"
    })
