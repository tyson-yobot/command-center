STEP 7: Add MP3 Upload Failure Detection + Alert
We‚Äôll update support_dispatcher.py to catch and report when the MP3 fails to upload (e.g., file missing, Slack error). This avoids silent failures.

Update your MP3 upload block to:

python
Copy
Edit
    # 2. Upload MP3 with error handling
    try:
        slack_client.files_upload(
            channels=SLACK_CHANNEL,
            file=f"./uploads/{mp3_filename}",
            filename=mp3_filename,
            title="üéß Voice Reply",
            initial_comment="Here's the MP3 reply from YoBot üéô"
        )
    except FileNotFoundError:
        slack_client.chat_postMessage(
            channel=SLACK_CHANNEL,
            text=f"‚ö†Ô∏è MP3 file *{mp3_filename}* not found for ticket `{ticket_id}`. Check ElevenLabs voice generation."
        )
    except SlackApiError as e:
        slack_client.chat_postMessage(
            channel=SLACK_CHANNEL,
            text=f"‚ö†Ô∏è Failed to upload MP3 for `{ticket_id}`: {e.response['error']}"
        )
This ensures your team sees any failures immediately.

‚úÖ STEP 8: Auto-Close Non-Escalated Zendesk Tickets (Optional)
If a ticket does not need escalation, you can auto-close it from Replit using the Zendesk API.

Here‚Äôs a quick utility you can add:

python
Copy
Edit
import requests

def close_zendesk_ticket(ticket_id):
    zendesk_subdomain = os.getenv("ZENDESK_SUBDOMAIN")
    zendesk_email = os.getenv("ZENDESK_EMAIL")
    zendesk_token = os.getenv("ZENDESK_API_TOKEN")

    url = f"https://{zendesk_subdomain}.zendesk.com/api/v2/tickets/{ticket_id}.json"
    headers = {"Content-Type": "application/json"}
    auth = (f"{zendesk_email}/token", zendesk_token)
    payload = {
        "ticket": {
            "status": "closed"
        }
    }

    response = requests.put(url, auth=auth, headers=headers, json=payload)
    print("üé´ Auto-closed ticket:", ticket_id, response.status_code)
Then call this in your webhook handler:

python
Copy
Edit
if escalation_flag.lower() == "no":
    close_zendesk_ticket(ticket_id)