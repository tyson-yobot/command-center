STEP 5 ‚Äî HubSpot Contact Creation via API
This script creates the client contact in HubSpot using their email, name, and company.

python
Copy
Edit
import requests

HUBSPOT_API_KEY = 'YOUR_HUBSPOT_API_KEY'

def create_hubspot_contact(email, first_name, last_name, company):
    url = "https://api.hubapi.com/crm/v3/objects/contacts"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {HUBSPOT_API_KEY}"
    }
    data = {
        "properties": {
            "email": email,
            "firstname": first_name,
            "lastname": last_name,
            "company": company
        }
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        print(f"‚úÖ HubSpot contact created: {email}")
        return response.json()['id']
    else:
        print(f"‚ùå HubSpot creation failed: {response.text}")
        return None
‚úÖ STEP 6 ‚Äî Dynamic Work Order: Smart Roadmap Build
This function pulls a preset dictionary of tasks by package/add-on and creates them in Airtable (same Task Table Template table). For now, example data is hardcoded ‚Äî we‚Äôll later link it to your full CSV/logic map.

python
Copy
Edit
def build_roadmap_for_client(package, selected_addons):
    package_tasks = {
        "Pro Bot": [
            {
                "task_name": "Enable VoiceBot",
                "phase": "Setup",
                "owner_type": "‚úÖ SYSTEM",
                "applies_to": "Pro Bot",
                "automation_notes": "trigger_voicebot_enable(client_id)"
            },
            {
                "task_name": "Connect Calendar Tools",
                "phase": "Setup",
                "owner_type": "‚úÖ SYSTEM",
                "applies_to": "Pro Bot",
                "automation_notes": "calendar_integration(client_config)"
            }
        ],
        "Enterprise Bot": [
            {
                "task_name": "Activate Smart Quoting Engine",
                "phase": "Setup",
                "owner_type": "‚úÖ SYSTEM",
                "applies_to": "Enterprise Bot",
                "automation_notes": "smart_quote_sync(client_id)"
            }
        ]
    }

    addon_tasks = {
        "Slack Notifications": [{
            "task_name": "Swap Slack webhook to client",
            "phase": "Setup",
            "owner_type": "‚úÖ SYSTEM",
            "applies_to": "Slack Notifications",
            "automation_notes": "slack_webhook_swap(client_id)"
        }],
        "QuickBooks Online Sync": [{
            "task_name": "Enable QuickBooks sync",
            "phase": "Setup",
            "owner_type": "‚úÖ SYSTEM",
            "applies_to": "QuickBooks",
            "automation_notes": "qbo_sync_init(client_id)"
        }]
    }

    tasks = package_tasks.get(package, [])
    for addon in selected_addons:
        tasks.extend(addon_tasks.get(addon, []))

    for task in tasks:
        post_task_to_airtable(**task)
üß† Example:

python
Copy
Edit
build_roadmap_for_client("Pro Bot", ["Slack Notifications", "QuickBooks Online Sync"])