YoBot® Scraper Tool — Final Spec for Replit Devs

This document defines exactly what needs to be done for each lead scraper module (Apollo, Apify, PhantomBuster) to ensure full functionality, perfect UX, cross-platform compatibility, and scalability for global deployment.

✅ Universal Requirements (Apply to All Tools)

Group filters into logical sections

Use consistent layout (2-column grid with left/right balance)

All dropdowns must support default value + full label names

Every input field should have a label and an optional tooltip ("?")

Filters should be grouped into sections:

🧑 Contact Filters

🏢 Company/Business Filters

⚙️ Scraping Settings

Include bottom bar with:

🔄 Filter summary (e.g. “7 filters applied”)

⏱ Estimated leads (optional if backend can return estimate)

💾 Save preset button

🚀 Launch button (sticky footer on scroll)

Toggle between Test Company Mode (fake data, instant) vs YoBot Live Mode (real scraper)

🟢 Required Replit-Side Components (ALL SYSTEMS)

🔗 1. /api/launch-scrape (POST)

Handles all 3 platforms dynamically:

{
  "tool": "apollo",  // or "apify", "phantom"
  "filters": { ... }  // full object of scraper config
}

Triggers real scraper pipeline

Returns: { success: true, leadCount: 128, leads: [...] }

Logs test to Airtable below

📤 2. Airtable Test Logger (Scraper + Any Flow)

await fetch("https://api.airtable.com/v0/appRt8V3tH4g5Z5if/Integration%20Test%20Log", {
  method: "POST",
  headers: {
    "Authorization": `Bearer ${AIRTABLE_TOKEN}`,
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    fields: {
      "🧪 Integration Name": "Apollo Lead Scraper",
      "✅ Pass/Fail": true,
      "📝 Notes / Debug": "Validated Slack + Airtable",
      "📅 Test Date": new Date().toISOString(),
      "👤 QA Owner": "Daniel Sharpe",
      "📤 Output Data Populated?": true,
      "📁 Record Created?": true,
      "🔁 Retry Attempted?": false,
      "⚙️ Module Type": "Scraper",
      "🔗 Related Scenario Link": "https://replit.com/@YoBot/lead-scraper"
    }
  })
});

📩 3. Slack Webhook (On Success)

await fetch("https://hooks.slack.com/services/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", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    text: `✅ ${leadCount} leads scraped with *Apollo*
📥 Saved to Airtable · 🔗 <view URL>`
  })
});

📤 4. Airtable Sync (Scraped Leads)

POST https://api.airtable.com/v0/appRt8V3tH4g5Z5if/tblXXXXXXXXXXXXXX
Headers: Authorization, Content-Type
Body:
{
  "fields": {
    "🧑 Full Name": lead.fullName,
    "✉️ Email": lead.email,
    "🏢 Company Name": lead.company,
    "💼 Title": lead.title,
    "🌍 Location": lead.location,
    "📞 Phone Number": lead.phone,
    "🏭 Industry": lead.industry,
    "🔖 Source Tag": `${source} - ${Date}`,
    "🆔 Scrape Session ID": `scraper-${Date.now()}`,
    "🕒 Scraped Timestamp": new Date().toISOString()
  }
}

📦 Optional: Export CSV

Endpoint to bundle returned leads into downloadable CSV for client export

Triggered by button in Intelligence Results view

✅ UX & Testing Expectations

All components must log real test output

No fake test JSON allowed unless Test Company toggle is active

Use test tag in Airtable if run is from demo mode

All failed tests (e.g. API timeout) must be logged with retry status = false

🏁 Global Go-Live Rules

Requirement

✅ Must Have

Real API scraping working

✅

Slack alert with lead count

✅

Airtable sync to correct table

✅

Test log in Integration Test Log

✅

Toggle for Test vs Live company mode

✅

CSV export button from results screen

✅