21. route_command_center_trigger()
Universal dispatcher from Command Center dropdown trigger.

python
Copy
Edit
def route_command_center_trigger(category, payload):
    from datetime import datetime
    log_command_center_event("üß≠ Trigger Dispatch", f"{category} ‚Üí dispatched at {datetime.now()}")

    if category == "Apollo Scrape":
        return launch_apollo_scrape(
            api_key=payload["apollo_api"],
            title=payload["title"],
            location=payload["location"],
            company_keywords=payload["keywords"]
        )
    elif category == "Apify Maps":
        return launch_apify_scrape(
            apify_token=payload["apify_api"],
            actor_id=payload["actor_id"],
            search_term=payload["search"],
            location=payload["location"]
        )
    elif category == "Send SMS":
        return send_sms_followup(
            to_number=payload["to"],
            from_number=payload["from"],
            twilio_sid=payload["sid"],
            twilio_token=payload["token"],
            message=payload["message"]
        )
    elif category == "Transcribe":
        return transcribe_voice_call(
            audio_file_path=payload["file_path"],
            openai_key=payload["openai_key"]
        )
    else:
        return {"error": f"Unknown category: {category}"}
‚úÖ 22. send_sev1_alert_to_slack()
Fires emergency alerts into Slack.

python
Copy
Edit
def send_sev1_alert_to_slack(webhook_url, message):
    import requests
    payload = {"text": f"üö® *SEV-1 Alert:* {message}"}
    res = requests.post(webhook_url, json=payload)
    return res.status_code
‚úÖ 23. retry_failed_contact()
Schedules next retry using exponential delay.

python
Copy
Edit
def retry_failed_contact(base_id, table_name, api_key, record_id, attempt):
    import requests, datetime
    delay_minutes = min(60, 5 * (2 ** attempt))
    retry_time = (datetime.datetime.utcnow() + datetime.timedelta(minutes=delay_minutes)).isoformat()
    url = f"https://api.airtable.com/v0/{base_id}/{table_name}/{record_id}"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "fields": {
            "‚è∞ Retry At": retry_time,
            "üîÅ Retry Attempt": attempt
        }
    }
    response = requests.patch(url, headers=headers, json=payload)
    return response.json()
‚úÖ 24. rotate_auth_token()
Swaps out expired token in Airtable config.

python
Copy
Edit
def rotate_auth_token(base_id, table_name, api_key, token_field, new_token):
    import requests
    url = f"https://api.airtable.com/v0/{base_id}/{table_name}"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "records": [
            {
                "fields": {
                    token_field: new_token
                }
            }
        ]
    }
    response = requests.patch(url, headers=headers, json=payload)
    return response.json()
‚úÖ 25. schedule_command_loop()
Cyclic loop to trigger pending command jobs or retries.

python
Copy
Edit
def schedule_command_loop(records, trigger_function):
    import time
    for record in records:
        fields = record.get("fields", {})
        if fields.get("‚è∞ Retry At"):
            trigger_function(fields["üß≠ Trigger Type"], fields)
        time.sleep(2)
    return "Loop completed"
