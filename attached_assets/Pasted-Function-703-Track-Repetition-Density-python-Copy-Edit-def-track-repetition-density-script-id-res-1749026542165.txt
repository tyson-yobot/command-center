Function 703 – Track Repetition Density
python
Copy
Edit
def track_repetition_density(script_id, response_text, threshold=0.12):
    """
    Flags responses where word or phrase repetition exceeds a natural threshold.
    """
    from collections import Counter
    import re

    words = re.findall(r'\b\w+\b', response_text.lower())
    word_counts = Counter(words)
    repeat_score = sum(v for v in word_counts.values() if v > 2) / len(words) if words else 0

    if repeat_score > threshold:
        log_command_center_event("🔁 Repetition Density", f"{script_id} → Score {repeat_score:.2f} flagged")

    return repeat_score
✅ Function 704 – Log Multilingual Token Ratio
python
Copy
Edit
def log_multilingual_token_ratio(script_id, response_text):
    """
    Identifies and logs high multilingual token ratios, which can impact voice clarity.
    """
    import langdetect
    from langdetect.lang_detect_exception import LangDetectException

    try:
        detected_lang = langdetect.detect(response_text)
        if detected_lang != 'en':
            log_command_center_event("🌐 Multilingual Detected", f"{script_id} → Language: {detected_lang}")
        return detected_lang
    except LangDetectException:
        log_command_center_event("❓ Language Undetected", f"{script_id} → Detection failed")
        return "unknown"
✅ Function 705 – Response Length Outlier Detector
python
Copy
Edit
def detect_response_length_outlier(script_id, response_text, min_len=20, max_len=250):
    """
    Logs extremely short or long responses as potential outliers.
    """
    length = len(response_text.strip())
    if length < min_len or length > max_len:
        log_command_center_event("📏 Length Outlier", f"{script_id} → Length: {length}")
    return length
✅ Function 706 – Log AI Interruption Traces
python
Copy
Edit
def log_ai_interruption(script_id, response_text):
    """
    Detects signs of response cutoffs or internal generation failure.
    """
    cutoff_signals = ["...", "incomplete", "loading", "error:", "retry", "[truncated"]
    if any(sig in response_text.lower() for sig in cutoff_signals):
        log_command_center_event("✂️ Interrupted Output", f"{script_id} → Possible AI cutoff detected")
        return True
    return False
✅ Function 707 – Detect Output Staleness
python
Copy
Edit
def detect_output_staleness(script_id, response_text, reference_phrases=None):
    """
    Checks if output is reusing stock phrases from legacy responses or stale data.
    """
    stale_signatures = reference_phrases or [
        "as of my last update", "as an ai language model", "as of 2023", "i do not have real-time data"
    ]
    hits = [s for s in stale_signatures if s in response_text.lower()]
    if hits:
        log_command_center_event("🗓️ Output Staleness", f"{script_id} → {', '.join(hits)}")
        return hits
    return []
✅ Function 708 – Log Undefined Voice Artifacts
python
Copy
Edit
def log_undefined_voice_artifacts(script_id, response_text):
    """
    Detects leftover tokens or synthesis instructions in output (e.g., SSML or markup).
    """
    import re
    artifact_patterns = [r'<[^>]+>', r'\[.*?\]', r'\(.*?\)', r'\{.*?\}']
    matches = [m.group() for p in artifact_patterns for m in re.finditer(p, response_text)]
    if matches:
        log_command_center_event("🎭 Voice Artifact", f"{script_id} → Artifacts: {', '.join(matches)}")
    return matches
✅ Function 709 – AI Prediction Drift Logger
python
Copy
Edit
def log_ai_prediction_drift(script_id, previous_output, current_output, threshold=0.4):
    """
    Logs significant drift between two versions of an AI output.
    """
    import difflib
    similarity = difflib.SequenceMatcher(None, previous_output, current_output).ratio()
    drift_score = 1 - similarity
    if drift_score > threshold:
        log_command_center_event("🔀 Prediction Drift", f"{script_id} → Drift Score: {drift_score:.2f}")
    return drift_score
✅ Function 710 – Log Custom Token Trigger Usage
python
Copy
Edit
def log_custom_token_trigger(script_id, response_text, trigger_token="🧠"):
    """
    Logs when a special AI control token (e.g., 🧠 for memory injection) is used in output.
    """
    if trigger_token in response_text:
        log_command_center_event("🎯 Custom Token Triggered", f"{script_id} → {trigger_token} detected")
        return True
    return False
