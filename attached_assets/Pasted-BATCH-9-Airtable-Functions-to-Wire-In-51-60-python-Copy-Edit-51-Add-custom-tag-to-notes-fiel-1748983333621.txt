BATCH 9: Airtable Functions to Wire In (51–60)
python
Copy
Edit
# ✅ 51. Add custom tag to notes field
def tag_test_in_notes(api_key, test_name, tag):
    tagged_note = f"[TAG:{tag}]"
    return append_to_test_notes(api_key, test_name, tagged_note)

# ✅ 52. Get test results by date range
def get_tests_by_date_range(api_key, start_date, end_date):
    url = "https://api.airtable.com/v0/appCoAtCZdARb4AM2/tblRNjNnaGL5ICIf9"
    headers = {"Authorization": f"Bearer {api_key}"}
    params = {
        "filterByFormula": f"AND(IS_AFTER({{📅 Date Tested}}, '{start_date}'), IS_BEFORE({{📅 Date Tested}}, '{end_date}'))"
    }
    response = requests.get(url, headers=headers, params=params)
    return response.json()

# ✅ 53. Search tests by partial match in test name
def search_tests_by_partial_name(api_key, partial):
    url = "https://api.airtable.com/v0/appCoAtCZdARb4AM2/tblRNjNnaGL5ICIf9"
    headers = {"Authorization": f"Bearer {api_key}"}
    params = {
        "filterByFormula": f"FIND('{partial}', {{🧪 Test Name}})"
    }
    response = requests.get(url, headers=headers, params=params)
    return response.json()

# ✅ 54. Group tests by date tested
def group_tests_by_date(api_key):
    from collections import defaultdict
    records = get_all_airtable_records("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key)
    grouped = defaultdict(list)
    for r in records:
        date = r["fields"].get("📅 Date Tested")
        if date:
            grouped[date].append(r)
    return dict(grouped)

# ✅ 55. Add batch of test links (dict of name:link)
def add_batch_test_links(api_key, test_links_dict):
    for test_name, link in test_links_dict.items():
        add_reference_link(api_key, test_name, link)
    return {"status": "Links added", "count": len(test_links_dict)}

# ✅ 56. Set test to failed with reason
def fail_test_with_reason(api_key, test_name, reason):
    toggle_test_result(api_key, test_name, False)
    append_to_test_notes(api_key, test_name, f"❌ Reason: {reason}")
    return {"status": "Marked as failed"}

# ✅ 57. Mark multiple tests “In Review”
def mark_tests_in_review(api_key, test_names):
    for name in test_names:
        mark_test_in_review(api_key, name)
    return {"status": "Marked in review", "count": len(test_names)}

# ✅ 58. Pull tests with empty notes
def get_tests_with_empty_notes(api_key):
    records = get_all_airtable_records("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key)
    return [r for r in records if not r["fields"].get("🧠 Notes")]

# ✅ 59. Reassign “Tested By” for a given test
def reassign_test_owner(api_key, test_name, new_tester):
    record = find_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key, "🧪 Test Name", test_name)
    if not record.get("records"):
        return {"error": "Test not found"}
    record_id = record["records"][0]["id"]
    return update_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", record_id, api_key, {
        "🧑‍💻 Tested By": new_tester
    })

# ✅ 60. Add debug info to test notes (auto-labeled)
def log_debug_to_test(api_key, test_name, debug_msg):
    from datetime import datetime
    timestamp = datetime.now().strftime("%H:%M:%S")
    note = f"[DEBUG {timestamp}] {debug_msg}"
    return append_to_test_notes(api_key, test_name, note)