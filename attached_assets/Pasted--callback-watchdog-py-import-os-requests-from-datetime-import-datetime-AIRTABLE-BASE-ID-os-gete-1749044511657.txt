# callback_watchdog.py
import os, requests
from datetime import datetime

AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")
TABLE_ID = os.getenv("TABLE_ID")
AIRTABLE_KEY = os.getenv("AIRTABLE_KEY")
TWILIO_SID = os.getenv("TWILIO_SID")
TWILIO_AUTH = os.getenv("TWILIO_AUTH")
TWILIO_FROM = os.getenv("TWILIO_FROM")
ALERT_PHONE = os.getenv("ALERT_PHONE")

def send_reminder_sms(to, body):
    requests.post(
        f"https://api.twilio.com/2010-04-01/Accounts/{TWILIO_SID}/Messages.json",
        auth=(TWILIO_SID, TWILIO_AUTH),
        data={"To": to, "From": TWILIO_FROM, "Body": body}
    )

def run_watchdog():
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_ID}?filterByFormula=AND({{📅 Callback Scheduled}} < '{datetime.utcnow().isoformat()}', {{📄 Call Outcome}} = '📩 Callback Needed')"
    headers = {"Authorization": f"Bearer {AIRTABLE_KEY}"}
    res = requests.get(url, headers=headers).json()
    for r in res.get("records", []):
        phone = r['fields'].get("📞 Caller Phone")
        if phone:
            send_reminder_sms(phone, "📞 We missed your callback! Would you like to reschedule with YoBot?")

run_watchdog()


# daily_digest.py
import os, requests
from datetime import datetime

AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")
TABLE_ID = os.getenv("TABLE_ID")
AIRTABLE_KEY = os.getenv("AIRTABLE_KEY")
TWILIO_SID = os.getenv("TWILIO_SID")
TWILIO_AUTH = os.getenv("TWILIO_AUTH")
TWILIO_FROM = os.getenv("TWILIO_FROM")
ALERT_PHONE = os.getenv("ALERT_PHONE")

def send_digest():
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_ID}"
    headers = {"Authorization": f"Bearer {AIRTABLE_KEY}"}
    res = requests.get(url, headers=headers).json()

    missed = sum(1 for r in res["records"] if r['fields'].get("📄 Call Outcome") == "🔕 Missed")
    messages = sum(1 for r in res["records"] if r['fields'].get("📄 Call Outcome") == "📩 Voicemail")
    callbacks = sum(1 for r in res["records"] if r['fields'].get("📄 Call Outcome") == "📩 Callback Needed")

    summary = f"📊 YoBot Daily Digest:\n- {missed} missed calls\n- {callbacks} callbacks due\n- {messages} messages left"

    requests.post(
        f"https://api.twilio.com/2010-04-01/Accounts/{TWILIO_SID}/Messages.json",
        auth=(TWILIO_SID, TWILIO_AUTH),
        data={"To": ALERT_PHONE, "From": TWILIO_FROM, "Body": summary}
    )

send_digest()


# drip_campaign.py
import os, requests
from datetime import datetime, timedelta

AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")
TABLE_ID = os.getenv("TABLE_ID")
AIRTABLE_KEY = os.getenv("AIRTABLE_KEY")
TWILIO_SID = os.getenv("TWILIO_SID")
TWILIO_AUTH = os.getenv("TWILIO_AUTH")
TWILIO_FROM = os.getenv("TWILIO_FROM")

DRIP_TEMPLATE = {
    1: "👋 Just checking in! Would you like to finish booking with YoBot?",
    3: "📅 Still interested in a demo or setup? We’re here when you’re ready.",
    7: "📬 Last call — we’ll close this out unless we hear back. Thanks from YoBot."
}

def send_sms(to, body):
    requests.post(
        f"https://api.twilio.com/2010-04-01/Accounts/{TWILIO_SID}/Messages.json",
        auth=(TWILIO_SID, TWILIO_AUTH),
        data={"To": to, "From": TWILIO_FROM, "Body": body}
    )

def run_drip():
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_ID}"
    headers = {"Authorization": f"Bearer {AIRTABLE_KEY}"}
    res = requests.get(url, headers=headers).json()

    for r in res.get("records", []):
        created = r['createdTime']
        phone = r['fields'].get("📞 Caller Phone")
        if not phone:
            continue
        
        days_since = (datetime.utcnow() - datetime.fromisoformat(created[:-1])).days
        if days_since in DRIP_TEMPLATE:
            send_sms(phone, DRIP_TEMPLATE[days_since])

run_drip()


# sms_inbound_webhook.py
from flask import Flask, request, Response
import os, requests

app = Flask(__name__)

AIRTABLE_KEY = os.getenv("AIRTABLE_KEY")
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")
TABLE_ID = os.getenv("TABLE_ID")

def update_airtable_status(phone, message):
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_ID}?filterByFormula={{📞 Caller Phone}}='{phone}'"
    headers = {"Authorization": f"Bearer {AIRTABLE_KEY}", "Content-Type": "application/json"}
    res = requests.get(url, headers=headers).json()

    if res.get("records"):
        record_id = res["records"][0]["id"]
        status = "✅ Re-engaged" if "yes" in message.lower() else ("❌ Do Not Contact" if "stop" in message.lower() or "no" in message.lower() else None)
        fields = {"🗨️ SMS Reply": message}
        if status:
            fields["📄 Call Outcome"] = status

        requests.patch(f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{TABLE_ID}/{record_id}", headers=headers, json={"fields": fields})

@app.route("/sms_inbound_webhook", methods=["POST"])
def sms_webhook():
    from_number = request.form.get("From")
    message = request.form.get("Body")
    update_airtable_status(from_number, message)
    return Response("", status=200)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=3000)
