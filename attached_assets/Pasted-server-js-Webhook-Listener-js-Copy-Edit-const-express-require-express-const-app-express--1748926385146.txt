server.js – Webhook Listener
js
Copy
Edit
const express = require('express');
const app = express();
const { exec } = require('child_process');

app.use(express.json());

app.post('/webhook', (req, res) => {
  const ticket = req.body;
  console.log("🔥 Webhook received:", ticket);

  require('fs').writeFileSync('ticket.json', JSON.stringify(ticket));

  exec('python run_yobot_support.py', (err, stdout, stderr) => {
    if (err) {
      console.error("Dispatch error:", stderr);
      return res.status(500).send("❌ Error");
    }
    console.log(stdout);
    res.send("✅ Dispatched");
  });
});

app.listen(3000, () => console.log("🎧 Listening on port 3000"));
📁 run_yobot_support.py – Central Dispatcher
python
Copy
Edit
import json
from ai_support_agent import generate_ai_reply
from elevenlabs_voice_generator import generate_voice_reply
from support_dispatcher import dispatch_support_response

with open('ticket.json', 'r') as f:
    ticket = json.load(f)

print("🔄 Generating AI reply...")
ai_result = generate_ai_reply(ticket)
ticket.update(ai_result)

print("🔄 Generating MP3...")
mp3_path = generate_voice_reply(ticket["aiReply"])

if mp3_path:
    print("📤 Dispatching to Slack + Airtable...")
    dispatch_support_response(ticket)
else:
    print("❌ MP3 generation failed. Ticket logged to fallback.")
📁 ai_support_agent.py
python
Copy
Edit
import os
import openai

openai.api_key = os.getenv("OPENAI_API_KEY")

ESCALATION_KEYWORDS = ["angry", "cancel", "lawsuit", "not working", "refund"]
NEGATIVE_SENTIMENTS = ["frustrated", "angry", "upset", "disappointed"]

def generate_ai_reply(ticket):
    try:
        prompt = f"""
Respond professionally to this support issue:

Client: {ticket['clientName']}
Topic: {ticket['topic']}
Sentiment: {ticket['sentiment']}

Give a concise but helpful reply:
"""
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are YoBot’s support AI, friendly and helpful."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.6,
            max_tokens=250
        )

        ai_reply = response['choices'][0]['message']['content']
        escalation_flag = (
            any(word in ai_reply.lower() for word in ESCALATION_KEYWORDS)
            or ticket["sentiment"].lower() in NEGATIVE_SENTIMENTS
        )

        return {
            "aiReply": ai_reply,
            "escalationFlag": escalation_flag
        }

    except Exception as e:
        print(f"[AI Agent Error] {e}")
        return {
            "aiReply": "We're looking into your issue and will follow up shortly.",
            "escalationFlag": True
        }
📁 ticket.json (Starter Example)
json
Copy
Edit
{
  "ticketId": "TCK-999",
  "clientName": "Tyson",
  "topic": "Support bot doesn't reply with voice",
  "sentiment": "upset"
}
📁 .replit (Ensure correct startup)
ini
Copy
Edit
run = "node server.js"