"dependencies": {
  "puppeteer": "^21.3.8"
}
Then run:

bash
Copy
Edit
npm install puppeteer
âœ… Step 2: Create Endpoint â€” server/pdfQuote.ts
ts
Copy
Edit
// server/pdfQuote.ts
import express from 'express';
import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';

const router = express.Router();

router.post('/api/pdf/generate', async (req, res) => {
  try {
    const { clientName, botPackage, addOns, totalOneTime, totalMonthly } = req.body;

    const htmlContent = `
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; padding: 40px; }
            h1 { color: #1A73E8; }
            .section { margin-bottom: 30px; }
            .total { font-size: 18px; font-weight: bold; }
          </style>
        </head>
        <body>
          <h1>ðŸ“„ YoBotÂ® Quote Summary</h1>
          <div class="section">
            <strong>Client:</strong> ${clientName}<br>
            <strong>Selected Package:</strong> ${botPackage}
          </div>
          <div class="section">
            <strong>Selected Add-Ons:</strong>
            <ul>${addOns.map((item: string) => `<li>${item}</li>`).join('')}</ul>
          </div>
          <div class="section total">ðŸ’³ One-Time: $${totalOneTime}</div>
          <div class="section total">ðŸ“† Monthly: $${totalMonthly}/mo</div>
          <div style="margin-top: 40px; font-size: 12px; color: #888;">Generated by YoBotÂ® Command Center</div>
        </body>
      </html>
    `;

    const browser = await puppeteer.launch({ headless: 'new' });
    const page = await browser.newPage();
    await page.setContent(htmlContent);
    
    const pdfPath = path.resolve(`./pdfs/${Date.now()}_quote.pdf`);
    await page.pdf({ path: pdfPath, format: 'A4' });

    await browser.close();

    const fileStream = fs.createReadStream(pdfPath);
    fileStream.pipe(res);
  } catch (err) {
    console.error('PDF generation failed:', err);
    res.status(500).send('Failed to generate quote PDF.');
  }
});

export default router;
âœ… Step 3: Register Route in server/index.ts
ts
Copy
Edit
import pdfQuoteRoute from './pdfQuote';
app.use(pdfQuoteRoute);
âœ… Step 4: Sample POST Payload
Send this to /api/pdf/generate:

json
Copy
Edit
{
  "clientName": "Tyson Lerfald",
  "botPackage": "ðŸ§  Pro Plan",
  "addOns": ["ðŸ“£ Slack Notifications", "ðŸ’¸ SmartSpendâ„¢ Dashboard"],
  "totalOneTime": 9250,
  "totalMonthly": 1148
}