Google Calendar Sync (server/calendar.ts)
ts
Copy
Edit
import { google } from 'googleapis';
import express from 'express';

const oauth2Client = new google.auth.OAuth2(
  process.env.GOOGLE_CLIENT_ID,
  process.env.GOOGLE_CLIENT_SECRET,
  `${process.env.BASE_URL}/api/calendar/oauth/callback`
);

export const calendarRouter = express.Router();

calendarRouter.get('/oauth', (req, res) => {
  const url = oauth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: ['https://www.googleapis.com/auth/calendar'],
  });
  res.redirect(url);
});

calendarRouter.get('/oauth/callback', async (req, res) => {
  const { code } = req.query;
  const { tokens } = await oauth2Client.getToken(code as string);
  oauth2Client.setCredentials(tokens);
  res.send('Calendar connected');
});

calendarRouter.get('/events', async (req, res) => {
  const cal = google.calendar({ version: 'v3', auth: oauth2Client });
  const { data } = await cal.events.list({ calendarId: 'primary' });
  res.json(data.items);
});
ENV:

ini
Copy
Edit
GOOGLE_CLIENT_ID=‚Ä¶
GOOGLE_CLIENT_SECRET=‚Ä¶
BASE_URL=https://tyson44.replit.app
2. Slack Slash Commands (server/slackCommands.ts)
ts
Copy
Edit
import express from 'express';
import { sendSlackAlert } from './alerts';

const router = express.Router();

router.post('/slack/commands', express.urlencoded({ extended: true }), (req, res) => {
  const { command, text, user_id } = req.body;
  let reply = '';

  if (command === '/status') {
    // example fetch metrics
    reply = `Calls Today: ${getMetric('callsToday')}, Leads: ${getMetric('leads')}`;
  } else if (command === '/escalate') {
    sendSlackAlert(`Manual escalate by ${user_id}: ${text}`);
    reply = 'Escalation noted.';
  }

  res.json({ response_type: 'in_channel', text: reply });
});

export default router;
ENV:

ini
Copy
Edit
SLACK_SIGNING_SECRET=‚Ä¶
(add verification middleware as needed)

3. RAG Source Logger (server/ragLogger.ts)
ts
Copy
Edit
import { db } from './storage'; // your DB client

export async function logRAGQuery(query: string, docs: number, latency: string) {
  await db.query(
    'INSERT INTO rag_logs (query, docs_returned, latency, timestamp) VALUES ($1,$2,$3,NOW())',
    [query, docs, latency]
  );
}
Call in your RAG handler:

ts
Copy
Edit
import { logRAGQuery } from './ragLogger';
// after RAG completes:
await logRAGQuery(userQuery, docsCount, `${lat}ms`);
broadcastRAGQuery(userQuery, docsCount, `${lat}ms`);
4. WebSocket Stats Feed (update server/websocket.ts)
ts
Copy
Edit
import { wss } from './index'; // wherever wss is

export function broadcastStats(stats: Record<string, any>) {
  const msg = JSON.stringify({ type: 'statsUpdate', data: stats });
  wss.clients.forEach(c => c.readyState === 1 && c.send(msg));
}
Call periodically or on metric change:

ts
Copy
Edit
broadcastStats({ callsToday: 123, leads: 45, uptime: '99.99%' });
Frontend already listens on WebSocket. You‚Äôre now wired: calendar, slash‚Äêcommands, RAG logs, live stats.


2/2







You said:
685952645658-h7rmi7f2vhplqgknv5pq0981omov222h.apps.googleusercontent.com


ChatGPT said:
Got it ‚Äî now drop the Google Client Secret so we can wire this final connection. Then I‚Äôll send Replit the full .env block to paste.







You said:
how do i do that?  Do I need to send that code you just posted to replit?


ChatGPT said:
Yes ‚Äî here's exactly what to do, no fluff:

‚úÖ Step-by-Step for You + Replit
1. Send Replit this .env block (paste into their .env file)
ini
Copy
Edit
GOOGLE_CLIENT_ID=685952645658-h7rmi7f2vhplqgknv5pq0981omov222h.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=üëâ [paste your secret here]
BASE_URL=https://tyson44.replit.app