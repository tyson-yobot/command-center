1. launch_apollo_scrape()
Searches Apollo.io for leads.

python
Copy
Edit
def launch_apollo_scrape(api_key, title, location, company_keywords, page=1, per_page=25):
    import requests
    url = "https://api.apollo.io/v1/mixed_people/search"
    headers = {
        "Cache-Control": "no-cache",
        "Content-Type": "application/json",
        "x-api-key": api_key
    }
    payload = {
        "q_organization_keywords": company_keywords,
        "person_titles": [title],
        "locations": [location],
        "page": page,
        "per_page": per_page
    }
    response = requests.post(url, headers=headers, json=payload)
    return response.json()
✅ 12. log_apollo_results_to_airtable()
Posts Apollo leads to Airtable.

python
Copy
Edit
def log_apollo_results_to_airtable(base_id, table_name, api_key, leads):
    import requests
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    url = f"https://api.airtable.com/v0/{base_id}/{table_name}"
    responses = []

    for lead in leads:
        record = {
            "fields": {
                "🧑 Name": f"{lead['first_name']} {lead['last_name']}",
                "📧 Email": lead.get("email", ""),
                "📞 Phone": lead.get("phone_number", ""),
                "🏢 Company": lead.get("organization_name", ""),
                "🌍 Location": lead.get("city", ""),
                "💼 Title": lead.get("title", ""),
                "🔗 LinkedIn": lead.get("linkedin_url", "")
            }
        }
        res = requests.post(url, headers=headers, json=record)
        responses.append(res.json())

    return responses
✅ 13. score_apollo_lead()
Gives a quick score for call priority.

python
Copy
Edit
def score_apollo_lead(title, company):
    score = 0
    if "owner" in title.lower() or "founder" in title.lower():
        score += 50
    if "manager" in title.lower():
        score += 30
    if "roof" in company.lower() or "hvac" in company.lower():
        score += 20
    return score
✅ 14. send_sms_followup()
SMS follow-up from Twilio after a call attempt.

python
Copy
Edit
from twilio.rest import Client

def send_sms_followup(to_number, from_number, twilio_sid, twilio_token, message):
    client = Client(twilio_sid, twilio_token)
    sms = client.messages.create(
        to=to_number,
        from_=from_number,
        body=message
    )
    return sms.sid
✅ 15. update_lead_sentiment_score()
Updates call sentiment score in Airtable.

python
Copy
Edit
def update_lead_sentiment_score(base_id, table_name, api_key, record_id, sentiment_score):
    import requests
    url = f"https://api.airtable.com/v0/{base_id}/{table_name}/{record_id}"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {"fields": {"🔊 Sentiment Score": sentiment_score}}
    response = requests.patch(url, headers=headers, json=payload)
    return response.json()
