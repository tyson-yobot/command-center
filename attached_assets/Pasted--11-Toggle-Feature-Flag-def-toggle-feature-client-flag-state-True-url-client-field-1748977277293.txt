# 11. ⚙️ Toggle Feature Flag
def toggle_feature(client, flag, state=True):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/feature-toggle", json={flag: state})
    print(f"⚙️ Feature '{flag}' set to {state} for {client['fields']['🧾 Client Name']}")

# 12. 🛠️ Trigger Health Check
def run_health_check(client):
    url = client["fields"]["📦 Render URL"]
    res = requests.get(f"{url}/health")
    print(f"🧠 Health check for {client['fields']['🧾 Client Name']}: {res.status_code}")

# 13. 🧪 Run Test Suite
def run_test_suite(client):
    url = client["fields"]["📦 Render URL"]
    res = requests.post(f"{url}/tests/run")
    print(f"🧪 Tests triggered for {client['fields']['🧾 Client Name']}: {res.status_code}")

# 14. 📥 Pull Environment Settings
def get_env_config(client):
    url = client["fields"]["📦 Render URL"]
    res = requests.get(f"{url}/env")
    print(f"🌐 Env for {client['fields']['🧾 Client Name']}:\n{res.text[:500]}")

# 15. 💬 Prompt A/B Test Trigger
def push_prompt_variation(client, prompt_id):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/prompt/ab", json={"prompt_id": prompt_id})
    print(f"💬 A/B test sent to {client['fields']['🧾 Client Name']}")

# 16. 📊 Pull Analytics Snapshot
def fetch_analytics(client):
    url = client["fields"]["📦 Render URL"]
    res = requests.get(f"{url}/analytics/snapshot")
    print(f"📈 Snapshot for {client['fields']['🧾 Client Name']}:\n{res.text[:500]}")

# 17. 🔕 Mute Notifications
def mute_notifications(client):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/notify/mute")
    print(f"🔕 Notifications silenced for {client['fields']['🧾 Client Name']}")

# 18. 🔔 Unmute Notifications
def unmute_notifications(client):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/notify/unmute")
    print(f"🔔 Notifications enabled for {client['fields']['🧾 Client Name']}")

# 19. 🚨 Trigger Alert
def trigger_custom_alert(client, alert_text):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/alert", json={"text": alert_text})
    print(f"🚨 Alert sent to {client['fields']['🧾 Client Name']}")

# 20. 📂 Archive Client Instance
def archive_client(client):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/archive")
    print(f"📂 {client['fields']['🧾 Client Name']} archived")
