Step 3: ðŸ”‘ Add OPENAI_API_KEY & Patch AI Support Logic
Target file: ai_support_agent.py

ðŸ”§ Action Plan:
Open Replit Secrets â†’ Add:

OPENAI_API_KEY = your actual key from OpenAI (production key, not test)

Update your OpenAI call logic:
Replace the fallback block in ai_support_agent.py with the real API call using the key:

python
Copy
Edit
import openai
import os

openai.api_key = os.environ.get("OPENAI_API_KEY")

def generate_support_reply(ticket_text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a helpful AI support agent for YoBotÂ®."},
                {"role": "user", "content": ticket_text}
            ],
            temperature=0.6,
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        return f"Fallback response. GPT error: {str(e)}"
âœ… Now youâ€™ll get real contextual responses instead of the fallback.

âœ… Step 4: ðŸŽ™ Add ELEVENLABS_API_KEY + Patch Voice Reply Logic
Target file: generate_voice_reply.py

ðŸ”§ Action Plan:
Open Replit Secrets â†’ Add:

ELEVENLABS_API_KEY

ELEVENLABS_VOICE_ID (optional: if you have a custom trained voice ID)

Update the request block:
Make sure your ElevenLabs call includes the key and handles errors cleanly:

python
Copy
Edit
import requests
import os

def generate_voice(text, filename="output.mp3"):
    API_KEY = os.getenv("ELEVENLABS_API_KEY")
    VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID") or "cjVigY5qzO86Huf0OWal"  # Default fallback voice

    url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}"
    headers = {
        "xi-api-key": API_KEY,
        "Content-Type": "application/json"
    }
    data = {
        "text": text,
        "voice_settings": {"stability": 0.5, "similarity_boost": 0.75}
    }

    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 200:
        with open(filename, "wb") as f:
            f.write(response.content)
        return filename
    else:
        raise Exception(f"Voice API error: {response.text}")
ðŸ”Š This should now generate clean MP3s and pass to Slack automatically.