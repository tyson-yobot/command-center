Batch 1: Core Utility Functions (1â€“10)
python
Copy
Edit
import datetime
import json
import os
import requests
from urllib.parse import urljoin

def current_utc_timestamp():
    return datetime.datetime.utcnow().isoformat()

def get_env_var(key, default=None):
    return os.getenv(key, default)

def log_debug(message):
    print(f"[DEBUG] {message}")

def log_error(message):
    print(f"[ERROR] {message}")

def build_log_payload(integration_name, status, notes, module_type, scenario_link, output_data=None, qa_owner="Tyson"):
    return {
        "fields": {
            "Integration Name": integration_name,
            "Pass/Fail": status,
            "Notes / Debug": notes,
            "Test Date": current_utc_timestamp(),
            "QA Owner": qa_owner,
            "Output Data Pop...": json.dumps(output_data) if output_data else "",
            "Record Created?": True,
            "Retry Attempted?": False,
            "Module Type": module_type,
            "Related Scenario Link": scenario_link
        }
    }

def send_to_airtable_log(payload):
    airtable_url = f"https://api.airtable.com/v0/{get_env_var('AIRTABLE_BASE_ID')}/{get_env_var('AIRTABLE_TABLE_ID')}"
    headers = {
        "Authorization": f"Bearer {get_env_var('AIRTABLE_API_KEY')}",
        "Content-Type": "application/json"
    }
    response = requests.post(airtable_url, headers=headers, json=payload)
    if response.status_code != 200:
        log_error(f"Airtable logging failed: {response.text}")
    else:
        log_debug("Airtable log successfully sent.")

def safe_json_parse(input_data):
    try:
        return json.loads(input_data)
    except Exception as e:
        log_error(f"JSON parse error: {e}")
        return {}

def retry_operation(operation, max_attempts=3):
    for attempt in range(max_attempts):
        try:
            return operation()
        except Exception as e:
            log_error(f"Attempt {attempt + 1} failed: {e}")
    raise Exception("All retry attempts failed.")

def extract_field(data, field_name, default=""):
    return data.get(field_name, default)