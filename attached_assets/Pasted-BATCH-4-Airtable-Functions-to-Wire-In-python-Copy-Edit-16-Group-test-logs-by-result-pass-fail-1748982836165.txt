BATCH 4: Airtable Functions to Wire In
python
Copy
Edit
# ✅ 16. Group test logs by result (pass/fail)
def group_test_logs_by_result(api_key):
    records = get_all_airtable_records("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key)
    passed = []
    failed = []
    for record in records:
        if record["fields"].get("✅ Passed?") == "Yes":
            passed.append(record)
        else:
            failed.append(record)
    return {"passed": passed, "failed": failed}

# ✅ 17. Count how many tests were run today
def count_tests_today(api_key):
    logs = get_today_test_logs(api_key)
    return len(logs.get("records", []))

# ✅ 18. Append to notes field on existing test
def append_to_test_notes(api_key, test_name, new_note):
    existing = find_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key, "🧪 Test Name", test_name)
    if not existing.get("records"):
        return {"error": "Test not found"}
    record = existing["records"][0]
    record_id = record["id"]
    current_notes = record["fields"].get("🧠 Notes", "")
    updated_notes = current_notes + "\n" + new_note
    return update_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", record_id, api_key, {"🧠 Notes": updated_notes})

# ✅ 19. Flag test as needing retest
def mark_test_for_retest(api_key, test_name):
    existing = find_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key, "🧪 Test Name", test_name)
    if not existing.get("records"):
        return {"error": "Test not found"}
    record_id = existing["records"][0]["id"]
    return update_airtable_record("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", record_id, api_key, {"🔁 Retested?": "Yes"})

# ✅ 20. Generate a simple test summary report
def generate_test_summary(api_key):
    logs = get_all_airtable_records("appCoAtCZdARb4AM2", "tblRNjNnaGL5ICIf9", api_key)
    total = len(logs)
    passed = len([r for r in logs if r["fields"].get("✅ Passed?") == "Yes"])
    failed = total - passed
    return {
        "total": total,
        "passed": passed,
        "failed": failed,
        "pass_rate": round((passed / total) * 100, 2) if total > 0 else 0
    }