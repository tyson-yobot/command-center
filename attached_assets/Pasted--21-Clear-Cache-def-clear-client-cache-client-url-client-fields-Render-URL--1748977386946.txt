# 21. 🧼 Clear Cache
def clear_client_cache(client):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/cache/clear")
    print(f"🧼 Cache cleared for {client['fields']['🧾 Client Name']}")

# 22. 🧠 Sync Personality Pack
def sync_personality(client):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/personality/sync")
    print(f"🧠 Personality pack synced for {client['fields']['🧾 Client Name']}")

# 23. 🔄 Reload Bot Logic
def reload_bot_logic(client):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/reload")
    print(f"🔄 Bot logic reloaded for {client['fields']['🧾 Client Name']}")

# 24. 🧪 Trigger Fallback Simulation
def simulate_fallback(client):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/simulate/fallback")
    print(f"🧪 Fallback simulation sent to {client['fields']['🧾 Client Name']}")

# 25. 🚧 Maintenance Mode Toggle
def toggle_maintenance_mode(client, state=True):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/maintenance", json={"active": state})
    print(f"🚧 Maintenance {'enabled' if state else 'disabled'} for {client['fields']['🧾 Client Name']}")

# 26. 💾 Backup Client Config
def backup_config(client):
    url = client["fields"]["📦 Render URL"]
    res = requests.get(f"{url}/config/backup")
    print(f"💾 Backup pulled for {client['fields']['🧾 Client Name']}:\n{res.text[:1000]}")

# 27. 🔁 Resync CRM Contact
def resync_crm_contact(client, contact_id):
    url = client["fields"]["📦 Render URL"]
    requests.post(f"{url}/crm/resync", json={"contact_id": contact_id})
    print(f"🔁 CRM contact {contact_id} resynced for {client['fields']['🧾 Client Name']}")

# 28. 🔍 Voicebot Health Diagnostic
def voicebot_health_check(client):
    url = client["fields"]["📦 Render URL"]
    res = requests.get(f"{url}/voicebot/health")
    print(f"🎙️ Voicebot health for {client['fields']['🧾 Client Name']}:\n{res.text[:1000]}")

# 29. 📈 Usage Metrics Pull
def get_usage_metrics(client):
    url = client["fields"]["📦 Render URL"]
    res = requests.get(f"{url}/metrics")
    print(f"📈 Usage metrics for {client['fields']['🧾 Client Name']}:\n{res.text[:1000]}")

# 30. 📡 Ping Webhook
def ping_webhook(client, path="webhook/test"):
    url = client["fields"]["📦 Render URL"]
    res = requests.post(f"{url}/{path}")
    print(f"📡 Webhook pinged for {client['fields']['🧾 Client Name']}: {res.status_code}")
