Parse Tally Webhook Payload
We'll update the Replit webhook handler to extract the necessary fields from the Tally form submission. Here's the revised code snippet:

python
Copy
Edit
from flask import Flask, request, jsonify
from datetime import datetime

app = Flask(__name__)

@app.route('/webhook/sales-order', methods=['POST'])
def handle_sales_order():
    try:
        data = request.json
        fields = {item['label']: item['value'] for item in data.get('fieldsArray', [])}

        # Extract core fields
        company_name = fields.get('Company Name')
        contact_name = fields.get('Full Name')
        email = fields.get('Email Address')
        phone = fields.get('Phone Number')
        website = fields.get('Website')
        bot_package = fields.get('Which YoBot® Package would you like to start with?')
        selected_addons = [label for label, value in fields.items() if value is True and 'Add-On' in label]
        custom_notes = fields.get('Custom Notes or Special Requests (Optional)')
        requested_start_date = fields.get('Requested Start Date (Optional)')
        payment_method = fields.get('Preferred Payment Method')

        # Timestamp & Quote ID
        current_date = datetime.now().strftime('%Y-%m-%d')
        quote_id = f"Q-{datetime.now().strftime('%Y%m%d')}-001"  # You will increment if needed

        # Log extracted info
        print(f"📦 Company: {company_name}")
        print(f"👤 Contact: {contact_name}")
        print(f"📬 Email: {email}")
        print(f"📱 Phone: {phone}")
        print(f"🌐 Website: {website}")
        print(f"🤖 Package: {bot_package}")
        print(f"🧩 Add-Ons: {selected_addons}")
        print(f"📝 Notes: {custom_notes}")
        print(f"📅 Requested Start Date: {requested_start_date}")
        print(f"💳 Payment Method: {payment_method}")
        print(f"🗓️ Date: {current_date}")
        print(f"🧾 Quote ID: {quote_id}")

        # Pass this data to your clone logic
        return jsonify({"status": "success", "message": "Sales order received."}), 200

    except Exception as e:
        print(f"❌ Error: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

app.run(port=5000)