 16. launch_apify_scrape()
Starts Google Maps scraping using your Apify actor.

python
Copy
Edit
def launch_apify_scrape(apify_token, actor_id, search_term, location):
    import requests
    url = f"https://api.apify.com/v2/actor-tasks/{actor_id}/runs?token={apify_token}"
    payload = {
        "searchStringsArray": [f"{search_term} {location}"],
        "maxCrawledPlaces": 50
    }
    headers = {"Content-Type": "application/json"}
    response = requests.post(url, headers=headers, json=payload)
    return response.json()
âœ… 17. fetch_apify_results()
Pulls the scraped data after Apify finishes.

python
Copy
Edit
def fetch_apify_results(run_id, apify_token):
    import requests
    url = f"https://api.apify.com/v2/datasets/{run_id}/items?token={apify_token}&format=json"
    response = requests.get(url)
    return response.json()
âœ… 18. transcribe_voice_call()
Runs Whisper on audio files for transcription.

python
Copy
Edit
def transcribe_voice_call(audio_file_path, openai_key):
    import openai
    openai.api_key = openai_key
    with open(audio_file_path, "rb") as audio_file:
        transcript = openai.Audio.transcribe("whisper-1", audio_file)
    return transcript["text"]
âœ… 19. reroute_on_fallback()
Tags fallback outcome and shifts record into retry or human review.

python
Copy
Edit
def reroute_on_fallback(base_id, table_name, api_key, record_id, status):
    import requests
    url = f"https://api.airtable.com/v0/{base_id}/{table_name}/{record_id}"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {"fields": {"ðŸš¨ Fallback Status": status}}
    response = requests.patch(url, headers=headers, json=payload)
    return response.json()
âœ… 20. tag_call_result()
Logs the call outcome + success/fail toggle.

python
Copy
Edit
def tag_call_result(base_id, table_name, api_key, record_id, result_text, success=True):
    import requests
    url = f"https://api.airtable.com/v0/{base_id}/{table_name}/{record_id}"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "fields": {
            "ðŸ“ž Call Outcome": result_text,
            "âœ… Success": success
        }
    }
    response = requests.patch(url, headers=headers, json=payload)
    return response.json()